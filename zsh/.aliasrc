# General
alias qq='exit'
alias py='ipython'
alias dv='dirs -v'
alias vim='nvim'
alias ssctl='sudo systemctl'
#alias sctlr='systemctl reboot'
alias reboot_='reboot'
alias reboot='systemctl reboot'
alias grep='grep --color'
alias upgrades='yay -Sy && yay -Qu'
alias planner='/home/seth/env/scripts/planner-extract.sh'
alias rust_evcxr='evcxr'
alias unzip='unzip -q'
alias unzip_='/usr/bin/unzip'
alias tm='gio trash'
alias mntjet='sshfs nvidia@tx2_rv:/home/nvidia/ /home/seth/kbcar_home'
alias umntjet='fusermount -u /home/seth/kbcar_home'
alias mnt-remarkable='sshfs root@10.11.99.1:/ /home/seth/sshmnt'
alias unreal='~/dev/ue4/UnrealEngine-${UE_VERSION}/Engine/Binaries/Linux/UE4Editor'
alias scaedm='ssh smn45@ssh.et.byu.edu'
alias nuke='pkill -SIGKILL -fe '
alias htop='htop -u seth'
alias htop_='/usr/bin/htop'
alias df='/bin/df -h -x tmpfs -x devtmpfs |grep -v loop'
alias df_='/bin/df'
alias msger='fb-messenger-cli'
alias watch='watch -x -c -n 0.5 '
alias watch_='/usr/bin/watch'
alias nv='nvidia-smi'
alias ssh_desktop='ssh desktop'
alias remarkable='reMarkable'
#alias blender='~/.local/share/blender/blender'
alias tmux_init='tmux -f ~/env/.tmux.conf new-session'
alias blueman='blueman-tray'
alias btr='sudo systemctl restart bluetooth.service'
alias feh='feh -B black'
alias ipa='ip --brief address show'
alias boost='asusctl profile boost; asusctl -f boost'
alias normal='asusctl profile normal; asusctl -f normal'
alias silent='asusctl profile silent; asusctl -f silent'
alias g_integrated='asusctl graphics -m integrated'
alias g_nvidia='asusctl graphics -m nvidia'
alias lscpu_='lscpu | rg boost'
alias clickup='/opt/clickup'
alias remouse0='remouse --orientation left --monitor 0'
alias remouse1='remouse --orientation left --monitor 1'

alias blocks_run='~/Documents/AirSim/worlds/Blocks/Blocks.sh'
ue_build_blocks() {
    ~/dev/ue4/UnrealEngine-${UE_VERSION}/Engine/Build/BatchFiles/Linux/Build.sh BlocksEditor Linux Development ~/Documents/unreal_projects/Blocks/Blocks.uproject -waitmutex
}
delete_known_host_line() {
    sed -i ''${1}d'' ~/.ssh/known_hosts
}
lsblk() {
    /bin/lsblk -o NAME,FSTYPE,SIZE,STATE,MOUNTPOINT${1}
}
alias lsblk_='/bin/lsblk'
yros() {
    #txt='yay -S ros-noetic-'
    yay -S ros-noetic-${1}
}

chseth() {
    sudo chown seth:seth $1
    chmod 666 $1
}

get_alias() {
    #echo $(echo ${a} | awk -F"[ ]" '{print $4}')
    echo "$(which $1)" | awk -F"[ ]" '{print $4,$NF}'
}

# holodeck
alias kill_holodeck='killall Holodeck && killall Holodeck'
alias holodeck_ver='python -c "import holodeck; print(holodeck.__version__)"'
holodeck_normal() {
    cd ~/packages/python-holodeck
    yes y | makepkg -i ${1}
}
holodeck_custom() {
    cd ~/packages/python-holodeck-seth
    yes y | makepkg -i ${1}
}

# exa to replace ls
#alias x='exa'
alias ls='exa'
alias l='exa -1'
alias lh='exa -1a'
alias lk='exa -1a --group-directories-first'
alias lsk='exa --group-directories-first'
alias ll='exa -l'
alias llk='exa -l --group-directories-first'
alias la='exa -la'
alias lak='exa -la --group-directories-first'

# ls aliases - in order from most to least comfortable
#alias l='ls -1'
#alias lh='l -A'
#alias lk='l --group-directories-first'
#alias lsk='ls --group-directories-first'
#alias ll='ls -lhgG'
#alias llk='ll --group-directories-first'
#alias lla='ls -l'
#alias la='ls -lAh'
#alias lak='ls -lAh --group-directories-first'

rmview_change(){
    rm ~/.config/rmview/rmview.json
    ln -s ~/.config/rmview/rmview-$1.json ~/.config/rmview/rmview.json
}


# Files stuff
alias count_files='find . ! -name . -prune -type f -print | grep -c /'
alias count_files_recurse='find .//. ! -name . -print -type f | grep -c /'
alias chmod_rm_green_highlight='chmod -R a-x,o-w,+X'
zath() {
  tabbed -cd zathura $1 -e
}
upload_gdrive() { # upload file to Sync dir on Google Drive
  gdrive upload -p 0B0rj1VEWGIltcmJ1UGNIQTVfTmc $1
}

sizes() {
  sudo find . -mindepth 1 -maxdepth 1 -print0 | xargs -0 du -hsc | sort -hr
}
sizes_nosudo() {
  find . -mindepth 1 -maxdepth 1 -print0 | xargs -0 du -hsc | sort -hr
}

# bat
#alias man='batman'
alias brg='batgrep'

# ripgrep
alias rg_sudo='sudo rg $1'
alias rga='rg --no-ignore --hidden $1'
alias rga_sudo='sudo rg --no-ignore --hidden $1'
alias rgf='rg --no-ignore-vcs --hidden --files | rg'
alias rgfa='rg --no-ignore --hidden --files | rg'
alias rgf_sudo='sudo rg --no-ignore-vcs --hidden --files | rg'
alias rgfa_sudo='sudo rg --no-ignore --hidden --files | rg'

alias rgt='rg --no-ignore --text $1'

power_draw() {
  awk '{print $1*10^-6 " W"}' /sys/class/power_supply/BAT0/power_now
}

power_draw_watch() {
  watch -x -c -n 1.0 awk '{print $1*10^-6 " W"}' /sys/class/power_supply/BAT0/power_now
}

# ranger file manager
ranger-cd() {
    tempfile="$(mktemp -t tmp.XXXXXX)"
    ranger --choosedir="$tempfile" "${@:-$(pwd)}"
    test -f "$tempfile" &&
    if [ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]; then
        cd -- "$(cat "$tempfile")"
    fi
    rm -f -- "$tempfile"
}

alias ra='ranger-cd'
alias ra_='ranger'
bindkey -s '^O' 'ranger-cd\n'

# Copying with progress/speed info
alias rp='rsync -ahvP'

alias sudo_rp='sudo rsync -ahv --no-owner'
alias sudo_rpprog='sudo rsync -ahv --no-owner --progress'
alias rsync_ssh='rsync -ahzPv "$@"'
# rsync_ssh() {
  #if [[ $1 == "--delete" || $1 == "-d" ]]; then
    #dir=$2
    #ops="--delete"
  #elif [[ -d $1 ]]; then
    #dir=$1
    #ops=""
  #else
    #echo "oops, that didn't work"
    #return 1
  #fi
#}
#rsync_to_remote() {
  #rsync_ssh "$@"

  #if [[ $(uname -n) == "seth-xps-13" ]]; then
    #rsync -ahzP $ops  "$(readlink -f $dir)/" desktop:$(readlink -f $dir)
  #elif [[ $(uname -n) == "seth-tower-3620" ]]; then
    #rsync -ahzP $ops "$(readlink -f $dir)/" xps-edu:$(readlink -f $dir)
  #fi
#}
#rsync_from_remote() {
  #rsync_ssh "$@"

  #if [[ $(uname -n) == "seth-xps-13" ]]; then
    #rsync -ahzP $ops  desktop:$(readlink -f $dir) "$(readlink -f $dir)/"
  #elif [[ $(uname -n) == "seth-tower-3620" ]]; then
    #rsync -ahzP $ops  xps-edu:$(readlink -f $dir) "$(readlink -f $dir)/"
  #fi
#}

# rsync_ssh_school() {
  #if [[ $(uname -n) == "seth-xps-13" ]]; then
    #rsync -ahzP ~/Documents/School-Optimization/ desktop:~/Documents/School-Optimization
    #rsync -ahzP ~/Documents/School-Nonlinear/ desktop:~/Documents/School-Nonlinear
    #rsync -ahzP desktop:~/Documents/School-Optimization/ ~/Documents/School-Optimization
    #rsync -ahzP desktop:~/Documents/School-Nonlinear/ ~/Documents/School-Nonlinear
  #elif [[ $(uname -n) == "seth-tower-3620" ]]; then
    #rsync -ahzP ~/Documents/School-Nonlinear/ xps-edu:~/Documents/School-Nonlinear
    #rsync -ahzP ~/Documents/School-Optimization/ xps-edu:~/Documents/School-Optimization
    #rsync -ahzP xps-edu:~/Documents/School-Nonlinear/ ~/Documents/School-Nonlinear
    #rsync -ahzP xps-edu:~/Documents/School-Optimization/ ~/Documents/School-Optimization
  #fi
#}

# Move/Copy and follow
goto() { [ -d "$1" ] && cd "$1" || cd "$(dirname "$1")"; }
cpf() { cp "$@" && goto "$_"; }
mvf() { mv "$@" && goto "$_"; }

# cd and ls
cdl() {cd "$@" && ll}
cdls() {cd "$@" && ls}

# edit common files with vim
alias vz='vim ~/.zshrc && source ~/.zshrc'
alias ve='vim ~/env/.environment && source ~/env/.environment'
alias va='vim ~/env/zsh/.aliasrc && source ~/env/zsh/.aliasrc'
alias vv='vim ~/env/.vimrc'
alias vtmux='vim ~/env/.tmux.conf'
alias vala='vim ~/.config/alacritty/alacritty.yml'
alias vrefind='sudo vim /boot/EFI/refind/refind.conf'
alias vho='sudo vim /etc/hosts'
alias vpac='sudo vim /etc/pacman.conf'
alias vasus='sudo vim /etc/asusd/asusd.conf'

# zsh / sourcing / environment
alias szsh='source ~/.zshrc'
alias sdev='source devel/setup.zsh'
alias sros='source ~/.base_rosrc'
alias source_remarkable='unset LD_LIBRARY_PATH && source /usr/local/oecore-x86_64/environment-setup-cortexa9hf-neon-oe-linux-gnueabi'
alias path='sed "s/:/\n/g" <<< "$PATH"'
alias path_python='sed "s/:/\n/g" <<< "$PYTHONPATH"'
path_python_sys() {
  echo $(echo "import sys; print(sys.path)") | python | sed "s/', '/\n/g" | cut -d'[' -f 1 | cut -d']' -f 1
}

# ROS/Catkin
alias ros_env='env | rg ROS'
alias rosp='rospack profile'
alias catkin_make_cuda='catkin_make -DOpenCV_DIR=/usr/local/share/OpenCV -DVISUAL_MTT_CUDA=ON'
alias catkin_make_debug='catkin_make -DCMAKE_BUILD_TYPE=Debug'
alias catkin_make_release='catkin_make -DCMAKE_BUILD_TYPE=Release'
alias catkin_make_clean='rm -rf build devel && catkin_make && source devel/setup.zsh'
alias catkin_make_cleanj1='rm -rf build devel && catkin_make -j1'
alias nodeprocess_edit='sudo vim /opt/ros/noetic/lib/python3.9/site-packages/roslaunch/nodeprocess.py'
catkin_make_opencv4() {
  catkin_make \
    -DCMAKE_BUILD_TYPE=Debug \
	-DPYTHON_EXECUTABLE=~/.virtualenvs/v3.6/bin/python3 \
	-DPYTHON_INCLUDE_DIR=~/.virtualenvs/v3.6/include/python3.6m \
	-DPYTHON_LIBRARY=/usr/lib/python3.6/config-3.6m-x86_64-linux-gnu/libpython3.6m.so \
	-DOpenCV_DIR=/usr/local/opencv
}

alias px4_init='cd ~/dev/px4/Firmware && make px4_sitl_default none_convergence'

# Common directories
rfh="$(rospack find rosflight_holodeck)" > /dev/null 2>&1
alias ev='ranger-cd ~/env'
alias cd_rfhb='cd ~/dev/boat_landing_sim/src/rosflight_holodeck'
alias cd_rfhq='cd ~/dev/quadsim_ws/src/rosflight_holodeck'
alias cd_boat='cd ~/dev/boat_landing_sim'
alias cd_quadws='cd ~/dev/quadsim_ws'
alias cd_q='cd ~/dev/boat_landing_sim/src/quadsim'
alias cd_models='cd ~/dev/models/research/deeplab'
alias cd_holodeck_worlds='cd ~/.local/share/holodeck/0.3.1/worlds'
alias cd_exer='cd ~/dev/exercism/rust'
alias cd_windows_docs='cd /mnt/windows/Users/sethm/Documents'
alias cd_dl='cd ~/school/adv_dl/multirotorRL'
alias cd_blocks='cd ~/Documents/unreal_projects/Blocks'
alias cd_vplug='cd ~/Documents/unreal_projects/Blocks/Plugins/vtol-AirSim'
alias cd_alib='cd ~/Documents/unreal_projects/Blocks/Plugins/vtol-AirSim/Source/AirLib'
alias cd_px4='cd ~/dev/px4/Firmware'

if [[ -n "$rfh" ]]; then
  alias cd_holodeck='cd $rfh/python/holodeck && echo $(pwd)'
  alias cd_rfh='cd $rfh && echo $(pwd)'
  alias cdh='code $rfh/python/holodeck'
fi

# Handy code-related aliases
alias serv_call='rosservice call /param_set MIXER 2 && rosservice call /calibrate_imu'
alias cdb='code ~/dev/boat_landing_sim'
alias cdq='code ~/dev/quadsim_ws'
alias cde='code ~/dev/exercism/rust'
alias cdd='code ~/school/adv_dl/multirotorRL'
alias cdn='code ~/notes'
alias cda='code ~/Documents/unreal_projects/Blocks/Plugins/vtol-AirSim'
alias cdaa='code ~/Documents/unreal_projects/Blocks/Plugins/vtol-AirSim/Source/AirLib'
#alias cdm='code ~/dev/models/research/deeplab'
#alias cdv='code ~/Documents/research/vision_based_boat_landing'
#alias cdt='code ~/dev/tornado-migrate/t6'

# Print the 256 color test pattern
print256colors() {
  for i in {0..255} ; do
    printf "\x1b[48;5;%sm%3d\e[0m " "$i" "$i"
    if (( i == 15 )) || (( i > 15 )) && (( (i-15) % 6 == 0 )); then
        printf "\n";
    fi
  done
}

# FFMPEG converting MP4 or MOV to MOV for Resolve video editor
# Valid profiles: 1920x1080; bitrate (b:v): 45M; pixel format: yuv422p
#                 1280x720;  bitrate (b:v): 60M; pixel format: yuv422p
ffmpeg_mp4_to_mov_resolve() {
  if [[ "$#" -ne 1 ]]; then
    echo "Usage: $0 [dir]"
  elif ! [[ -e $1 ]]; then
    echo "$1 does not exist"
  else
    if [[ -d $1 ]]; then
      if [[ "${1: -1}" == "/" ]]; then
        FILES=${1}*
      else
        FILES=${1}/*
      fi
      CONV_DIR=${FILES:0:-2}/converted_resolve
      if [[ -e $CONV_DIR ]]; then
        echo "Error: directory for converted files already exists!"
        return 1
      fi
      mkdir $CONV_DIR
      for f in $~FILES; do
        echo "\n\n ------- Converting file $f -------\n\n"
        if [[ -f $f ]]; then
          fname=${f:2:-4}     \
          fps=$(ffprobe -i ${f} 2>&1 | sed -n "s/.*, \(.*\) fp.*/\1/p")
                              \
          ffmpeg -i ${f}      \
            -vcodec dnxhd     \
            -acodec pcm_s16le \
            -s 640x360        \
            -r $fps           \
            -b:v 60M          \
            -pix_fmt yuv422p  \
            -f mov            \
            "${CONV_DIR}/${fname}_R.MOV"
        fi
      done
    fi
  fi
}
ffmpeg_mov_to_mp4_resolve() {
  if [[ "$#" -ne 1 ]]; then
    echo "Usage: $0 [infile.mov]"
  elif ! [[ -e $1 ]]; then
    echo "$1 does not exist"
  else
    fname=${${1:0:-}}   \

    ffmpeg -i ${1}      \
    -vf yadif           \
    -codec:v libx264    \
    -crf 1              \
    -bf 2               \
    -flags +cgop        \
    -pix_fmt yuv420p    \
    -codec:a aac        \
    -strict -2          \
    -b:a 128k           \
    -r:a 48000          \
    -movflags faststart \
    ${fname}.MP4
  fi
}

# git
alias gs='git status'
alias gsu='git status -uno'
alias gfs='git fetch && git status'
alias gch='git checkout'
alias gcm='git commit -m'
alias subup='git submodule update --init --recursive'
alias gp='git push'
alias gl='git pull'
alias grv='git remote -v'

dir1=~/env
dir2=~/school/nonlinear
dir3=~/school/optimization
dir4=~/school

name1=$(echo $(echo "print('$dir1'.upper())"| python) | cut -d'/' -f 4)
name2=$(echo $dir2 | cut -d'/' -f 5)
name3=$(echo $dir3 | cut -d'/' -f 5)
name4=$(echo $(echo "print('$dir4'.upper())"| python) | cut -d'/' -f 4)

alias cd_nonlinear='cd $dir2'
alias cd_optimization='cd $dir3'
alias cdo='code $dir3'

pull_changes() {
  A=$(pwd)
  cd $dir1
  git pull
  #cd $dir2
  #git pull
  #cd $dir3
  #git pull
  #cd $dir4
  #git pull
  cd $A
  echo "\npersonal repos have been updated on this machine.\n"
}
push_changes() {
  A=$(pwd)
  echo "\n--$name1--"
  cd $dir1
  git add -A
  git commit -m "Auto-pushed changes"
  git push
  #echo "\n--$name2--"
  #cd $dir2
  #git add -A
  #git commit -m "Auto-pushed changes"
  #git push
  #echo "\n--$name3--"
  #cd $dir3
  #git add -A
  #git commit -m "Auto-pushed changes"
  #git push
  #echo "\n--$name4--"
  #cd $dir4
  #git add -A
  #git commit -m "Auto-pushed changes"
  #git push
  #echo "\n"
  cd $A
}
gstats() {
  A=$(pwd)
  echo "\n--$name1--"
  cd $dir1
  git status -s
  #echo "--$name4--"
  #cd $dir4
  #git status -s
  #echo " -- $name2 --"
  #cd $dir2
  #git status -s
  #echo " -- $name3 --"
  #cd $dir3
  #git status -s
  echo ""
  cd $A
}

source ~/.cups/.other
